{"ast":null,"code":"var _jsxFileName = \"C:\\\\UdemyReact\\\\FoodOrderApp\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport CartContext from './cart-context';\nimport { useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  //here the type and the item is obtained from the dispatchCartAction which is used through the action\n  if (action.type == 'ADD') {\n    const updateItems = state.items.concat(action.item);\n    const updateTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updateItems,\n      totalAmount: updateTotalAmount\n    };\n  }\n\n  return;\n  defaultCartState;\n};\n\nfunction CartProvider(props) {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  function addItemHandler(item) {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  }\n\n  function rempveItemHandler(id) {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  }\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemHandler,\n    removeItem: rempveItemHandler\n  };\n  return (\n    /*#__PURE__*/\n    //these is a basically provide the value to other component with the help of Context object rather than props nd which things are provided \n    //to other component we msut have to tell react through value term .So along with context.Provider we have to pass the values to.\n    _jsxDEV(CartContext.Provider, {\n      value: cartContext,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(CartProvider, \"2SyrzIf5h4zAVB5yWzJ1q/dSUlI=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/UdemyReact/FoodOrderApp/src/store/CartProvider.js"],"names":["CartContext","useReducer","defaultCartState","items","totalAmount","cartReducer","state","action","type","updateItems","concat","item","updateTotalAmount","price","amount","CartProvider","props","cartState","dispatchCartAction","addItemHandler","rempveItemHandler","id","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AACA,SAAQC,UAAR,QAAyB,OAAzB;;AAGA,MAAMC,gBAAgB,GAAC;AAACC,EAAAA,KAAK,EAAC,EAAP;AACvBC,EAAAA,WAAW,EAAC;AADW,CAAvB;;AAGA,MAAMC,WAAW,GAAE,CAACC,KAAD,EAAOC,MAAP,KAAgB;AAC/B;AACA,MAAGA,MAAM,CAACC,IAAP,IAAa,KAAhB,EAAsB;AAElB,UAAMC,WAAW,GAAEH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAAnB;AACA,UAAMC,iBAAiB,GAAGN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAkBN,MAAM,CAACI,IAAP,CAAYG,MAA5E;AACJ,WAAM;AACFX,MAAAA,KAAK,EAAEM,WADL;AAEFL,MAAAA,WAAW,EAACQ;AAFV,KAAN;AAKC;;AACD;AACIV,EAAAA,gBAAgB;AAEvB,CAfD;;AAgBA,SAASa,YAAT,CAAsBC,KAAtB,EAA4B;AAAA;;AACxB,QAAK,CAACC,SAAD,EAAWC,kBAAX,IAA+BjB,UAAU,CAACI,WAAD,EAAaH,gBAAb,CAA9C;;AACA,WAASiB,cAAT,CAAwBR,IAAxB,EAA6B;AACzBO,IAAAA,kBAAkB,CAAC;AAACV,MAAAA,IAAI,EAAC,KAAN;AAAaG,MAAAA,IAAI,EAAEA;AAAnB,KAAD,CAAlB;AAEH;;AACD,WAASS,iBAAT,CAA2BC,EAA3B,EAA8B;AAC1BH,IAAAA,kBAAkB,CAAC;AAACV,MAAAA,IAAI,EAAC,QAAN;AAAgBa,MAAAA,EAAE,EAACA;AAAnB,KAAD,CAAlB;AAEH;;AAED,QAAMC,WAAW,GAAG;AAChBnB,IAAAA,KAAK,EAACc,SAAS,CAACd,KADA;AAEhBC,IAAAA,WAAW,EAACa,SAAS,CAACb,WAFN;AAGhBmB,IAAAA,OAAO,EAAEJ,cAHO;AAIhBK,IAAAA,UAAU,EAAEJ;AAJI,GAApB;AAMJ;AAAA;AACI;AACA;AAEA,YAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAEE,WAA7B;AAAA,gBACKN,KAAK,CAACS;AADX;AAAA;AAAA;AAAA;AAAA;AAJJ;AAUC;;GA3BQV,Y;;KAAAA,Y;AA6BT,eAAeA,YAAf","sourcesContent":["import CartContext from './cart-context';\r\nimport {useReducer} from 'react';\r\n\r\n\r\nconst defaultCartState={items:[],\r\ntotalAmount:0}\r\n\r\nconst cartReducer =(state,action)=>{\r\n    //here the type and the item is obtained from the dispatchCartAction which is used through the action\r\n    if(action.type=='ADD'){\r\n\r\n        const updateItems= state.items.concat(action.item);\r\n        const updateTotalAmount = state.totalAmount + action.item.price*action.item.amount;\r\n    return{\r\n        items: updateItems,\r\n        totalAmount:updateTotalAmount\r\n    }\r\n    \r\n    }\r\n    return\r\n        defaultCartState;\r\n    \r\n}\r\nfunction CartProvider(props){\r\n    const[cartState,dispatchCartAction]=useReducer(cartReducer,defaultCartState);\r\n    function addItemHandler(item){\r\n        dispatchCartAction({type:'ADD', item: item})\r\n\r\n    }\r\n    function rempveItemHandler(id){\r\n        dispatchCartAction({type:'REMOVE', id:id})\r\n\r\n    }\r\n\r\n    const cartContext = {\r\n        items:cartState.items,\r\n        totalAmount:cartState.totalAmount,\r\n        addItem: addItemHandler,\r\n        removeItem: rempveItemHandler\r\n    }\r\nreturn(\r\n    //these is a basically provide the value to other component with the help of Context object rather than props nd which things are provided \r\n    //to other component we msut have to tell react through value term .So along with context.Provider we have to pass the values to.\r\n    \r\n    <CartContext.Provider value={cartContext}>\r\n        {props.children}\r\n    </CartContext.Provider>\r\n\r\n);\r\n\r\n}\r\n\r\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}