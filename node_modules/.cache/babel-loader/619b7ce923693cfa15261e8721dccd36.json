{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useNew = validate => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState('');\n  const [istouched, setIstouched] = useState(false);\n  const enteredValueIsValid = validate(enteredValue);\n  const ErrorOccure = !enteredValueIsValid && istouched;\n\n  function NewvalueChangeHandler(event) {\n    setEnteredValue(event.target.value);\n  }\n\n  function NewBlureHandler() {\n    setIstouched(true);\n  }\n\n  const reset = () => {\n    setEnteredValue('');\n    setIstouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    validatea: enteredValueIsValid,\n    ErrorOccure,\n    reset,\n    NewvalueChangeHandler,\n    NewBlureHandler\n  };\n};\n\n_s(useNew, \"POZjZBqHxOq+pHcnNdnAB382q0o=\");\n\nexport default useNew;","map":{"version":3,"sources":["C:/UdemyReact/FoodOrderAppDiff/src/hooks/input-cust.js"],"names":["useState","useNew","validate","enteredValue","setEnteredValue","istouched","setIstouched","enteredValueIsValid","ErrorOccure","NewvalueChangeHandler","event","target","value","NewBlureHandler","reset","validatea"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,MAAM,GAAEC,QAAD,IAAY;AAAA;;AAErB,QAAK,CAACC,YAAD,EAAcC,eAAd,IAAiCJ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAK,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAAzC;AAEA,QAAMO,mBAAmB,GAAGL,QAAQ,CAACC,YAAD,CAApC;AACA,QAAMK,WAAW,GAAG,CAACD,mBAAD,IAAwBF,SAA5C;;AAEA,WAASI,qBAAT,CAA+BC,KAA/B,EAAqC;AACjCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AAEH;;AACD,WAASC,eAAT,GAA0B;AACtBP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AAED,QAAMQ,KAAK,GAAE,MAAI;AACbV,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAKA,SAAM;AACFM,IAAAA,KAAK,EAACT,YADJ;AAEFY,IAAAA,SAAS,EAAER,mBAFT;AAGFC,IAAAA,WAHE;AAIFM,IAAAA,KAJE;AAKFL,IAAAA,qBALE;AAMFI,IAAAA;AANE,GAAN;AASH,CA9BD;;GAAMZ,M;;AAgCN,eAAeA,MAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useNew=(validate)=>{\r\n\r\n    const[enteredValue,setEnteredValue] = useState('');\r\n    const[istouched, setIstouched] = useState(false);\r\n\r\n    const enteredValueIsValid = validate(enteredValue);\r\n    const ErrorOccure = !enteredValueIsValid && istouched;\r\n\r\n    function NewvalueChangeHandler(event){\r\n        setEnteredValue(event.target.value);\r\n\r\n    }\r\n    function NewBlureHandler(){\r\n        setIstouched(true);\r\n    }\r\n\r\n    const reset =()=>{\r\n        setEnteredValue('');\r\n        setIstouched(false);\r\n    }\r\n\r\n    return{\r\n        value:enteredValue,\r\n        validatea: enteredValueIsValid,\r\n        ErrorOccure,\r\n        reset,\r\n        NewvalueChangeHandler,\r\n        NewBlureHandler,\r\n\r\n    }\r\n}\r\n\r\nexport default useNew;"]},"metadata":{},"sourceType":"module"}