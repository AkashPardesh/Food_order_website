{"ast":null,"code":"var _jsxFileName = \"C:\\\\UdemyReact\\\\FoodOrderAppDiff\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; //here we check the index of item in our existing items of array \n    //findindex on array is used to find the index of item which we required \n\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id); //here we kanow the index so with the help of index we can find existing item in our state.items array\n\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems; //here we check if the existing item is present then add the existing item in array but upadte its amount as follow\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action === 'REMOVE') {\n    const existingItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      //here we check that if the existing ID is not equal to new id then return the item in the new array\n      //else if it false then do not write in the array\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      const updatedItems = { ...state.items\n      };\n      updatedItems[existingItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  }; //these cartContext receive the items in the form of object then item points to initaial state\n\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/UdemyReact/FoodOrderAppDiff/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingItemIndex","existingItem","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import { useReducer } from 'react';\r\n\r\nimport CartContext from './cart-context';\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === 'ADD') {\r\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n    \r\n   //here we check the index of item in our existing items of array \r\n   //findindex on array is used to find the index of item which we required \r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    );\r\n    //here we kanow the index so with the help of index we can find existing item in our state.items array\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n    let updatedItems;\r\n\r\n    //here we check if the existing item is present then add the existing item in array but upadte its amount as follow\r\n    if (existingCartItem) {\r\n      const updatedItem = {\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount + action.item.amount,\r\n      };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    } else {\r\n      updatedItems = state.items.concat(action.item);\r\n    }\r\n\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount\r\n    };\r\n  }\r\n  if(action==='REMOVE'){\r\n    const existingItemIndex = state.items.findIndex((item)=>\r\n     item.id === action.id \r\n     );\r\n     const existingItem = state.items[existingItemIndex];\r\n     const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n\r\n    let updatedItems;\r\n     if(existingItem.amount ===1){\r\n       //here we check that if the existing ID is not equal to new id then return the item in the new array\r\n       //else if it false then do not write in the array\r\n       updatedItems = state.items.filter(item => item.id !== action.id);\r\n     }\r\n     else{\r\n      const updatedItem = {...existingItem, amount: existingItem.amount-1};\r\n      const updatedItems = {...state.items};\r\n      updatedItems[existingItemIndex] = updatedItem;\r\n     }\r\n     return{\r\n       items: updatedItems,\r\n       totalAmount : updatedTotalAmount\r\n     }\r\n  }\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({type: 'ADD', item: item});\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({type: 'REMOVE', id: id});\r\n  };\r\n  //these cartContext receive the items in the form of object then item points to initaial state\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}